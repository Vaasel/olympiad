generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model basicInfo {
  id             Int                  @id @default(autoincrement())
  userId         Int                  @unique(map: "BasicInfo_userId_key")
  status         basicinfo_status     @default(verified)
  accomodation   Boolean              @default(false)
  phoneno        String
  cnic           String
  gender         Boolean?
  profilePhoto   String?
  guardianName   String
  guardianNumber String
  address        String
  cnicFront      String?
  cnicBack       String?
  studentOf      basicinfo_studentOf?
  student_id     String?
  schoolName     String?
  ambassadorcode String?
  stdFront       String?
  stdBack        String?
  socials        basicinfo_socials?   @default(nosocials)
  user           user                 @relation(fields: [userId], references: [id], map: "BasicInfo_userId_fkey")
}

model challan {
  id                 Int                  @id @default(autoincrement())
  userId             Int
  detail             String?              @db.LongText
  netTotal           Int
  isPaid             challan_isPaid       @default(pending)
  paymentProof       String?
  user               user                 @relation(fields: [userId], references: [id], map: "Challan_userId_fkey")
  competitions_teams competitions_teams[]
  sports_teams       sports_teams[]

  @@index([userId], map: "Challan_userId_fkey")
}

model competitions {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique(map: "Competitions_name_key")
  gender             Boolean?
  description        String
  minPlayer          Int
  maxPlayer          Int
  teamCap            Int
  details            String?              @db.LongText
  price              Int
  competitions_teams competitions_teams[]
}

model competitions_teams {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @unique(map: "Competitions_Teams_name_key")
  userId                     Int
  competitionId              Int
  code                       String?
  challanId                  Int                          @default(-1)
  challan                    challan                      @relation(fields: [challanId], references: [id], map: "Competitions_Teams_challanId_fkey")
  competitions               competitions                 @relation(fields: [competitionId], references: [id], map: "Competitions_Teams_competitionId_fkey")
  user                       user                         @relation(fields: [userId], references: [id], map: "Competitions_Teams_userId_fkey")
  competitions_teams_members competitions_teams_members[]

  @@index([challanId], map: "Competitions_Teams_challanId_fkey")
  @@index([competitionId], map: "Competitions_Teams_competitionId_fkey")
  @@index([userId], map: "Competitions_Teams_userId_fkey")
}

model competitions_teams_members {
  id                 Int                @id @default(autoincrement())
  competitionsTeamId Int
  userId             Int
  competitions_teams competitions_teams @relation(fields: [competitionsTeamId], references: [id], map: "Competitions_Teams_Members_competitionsTeamId_fkey")
  user               user               @relation(fields: [userId], references: [id], map: "Competitions_Teams_Members_userId_fkey")

  @@index([competitionsTeamId], map: "Competitions_Teams_Members_competitionsTeamId_fkey")
  @@index([userId], map: "Competitions_Teams_Members_userId_fkey")
}

model faq {
  id       Int    @id @default(autoincrement())
  question String
  answer   String
  category String
}

model sports {
  id           Int            @id @default(autoincrement())
  name         String         @unique(map: "Sports_name_key")
  gender       Boolean?
  description  String
  minPlayer    Int
  maxPlayer    Int
  teamCap      Int
  details      String?        @db.LongText
  price        Int
  sports_teams sports_teams[]
}

model sports_teams {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique(map: "Sports_Teams_name_key")
  userId               Int
  sportsId             Int
  code                 String?
  challanId            Int                    @default(1)
  challan              challan                @relation(fields: [challanId], references: [id], map: "Sports_Teams_challanId_fkey")
  sports               sports                 @relation(fields: [sportsId], references: [id], map: "Sports_Teams_sportsId_fkey")
  user                 user                   @relation(fields: [userId], references: [id], map: "Sports_Teams_userId_fkey")
  sports_teams_members sports_teams_members[]

  @@index([challanId], map: "Sports_Teams_challanId_fkey")
  @@index([sportsId], map: "Sports_Teams_sportsId_fkey")
  @@index([userId], map: "Sports_Teams_userId_fkey")
}

model sports_teams_members {
  id           Int          @id @default(autoincrement())
  sportsTeamId Int
  userId       Int
  sports_teams sports_teams @relation(fields: [sportsTeamId], references: [id], map: "Sports_Teams_Members_sportsTeamId_fkey")
  user         user         @relation(fields: [userId], references: [id], map: "Sports_Teams_Members_userId_fkey")

  @@index([sportsTeamId], map: "Sports_Teams_Members_sportsTeamId_fkey")
  @@index([userId], map: "Sports_Teams_Members_userId_fkey")
}

model user {
  id                         Int                          @id @default(autoincrement())
  name                       String
  email                      String                       @unique(map: "User_email_key")
  password                   String
  token                      Int
  isValidated                Boolean
  isParticipant              Boolean                      @default(true)
  basicinfo                  basicInfo?
  challan                    challan[]
  competitions_teams         competitions_teams[]
  competitions_teams_members competitions_teams_members[]
  sports_teams               sports_teams[]
  sports_teams_members       sports_teams_members[]
}

enum basicinfo_status {
  pending
  rejected
  verified
  ban
}

enum challan_isPaid {
  pending
  verified
  rejected
}

enum basicinfo_studentOf {
  nust
  uni
  college
  school
  other
}

enum basicinfo_socials {
  nosocials
  qawali
  concert
  all
}
