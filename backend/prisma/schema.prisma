generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                         Int                          @id @default(autoincrement())
  name                       String
  email                      String                       @unique
  password                   String
  token                      Int
  isValidated                Boolean
  isParticipant              Boolean                      @default(true)
  basicInfo       BasicInfo?
  challan         Challan[]
  competitionsCap Competitions_Teams[]
  competitions    Competitions_Teams_Members[]
  sportCap        Sports_Teams[]
  sports          Sports_Teams_Members[]
}

model Challan {
  id                 Int                  @id @default(autoincrement())
  userId             Int
  detail             Json?
  netTotal           Int
  isPaid             ChallanStatus        @default(pending)
  paymentProof       String?
  user              User                 @relation(fields: [userId], references: [id])
  competitionsTeams Competitions_Teams[]
  sportsTeam        Sports_Teams[]
}

model BasicInfo {
  id             Int         @id @default(autoincrement())
  userId         Int         @unique
  status         UserStatus  @default(pending)
  accomodation   Boolean     @default(false)
  phoneno        String
  cnic           String
  gender         Boolean?
  profilePhoto   String?
  guardianName   String
  guardianNumber String
  address        String
  cnicFront      String?
  cnicBack       String?
  studentOf      StudentOf?
  student_id     String?
  schoolName     String?
  ambassadorcode String?
  stdFront       String?
  stdBack        String?
  socials        SocialEnum? @default(nosocials)
  user           User        @relation(fields: [userId], references: [id])
}

model Sports {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  gender       Boolean
  description  String
  minPlayer    Int
  maxPlayer    Int
  teamCap      Int
  details      Json?
  price        Int
  team Sports_Teams[]
}



model Sports_Teams {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique
  userId               Int
  sportsId             Int
  code                 String?
  challanId            Int                    @default(1)
  Challan              Challan                @relation(fields: [challanId], references: [id])
  sport              Sports                 @relation(fields: [sportsId], references: [id])
  user                 User                   @relation(fields: [userId], references: [id])
  members Sports_Teams_Members[]
}





model Sports_Teams_Members {
  id           Int          @id @default(autoincrement())
  sportsTeamId Int
  userId       Int
  sport        Sports_Teams @relation(fields: [sportsTeamId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

}

model Competitions {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  gender             Boolean
  description        String
  minPlayer          Int
  maxPlayer          Int
  teamCap            Int
  details            Json?
  price              Int
  competitionTeams Competitions_Teams[]
}

model Competitions_Teams {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @unique
  userId                     Int
  competitionId              Int
  code                       String?
  challanId                  Int                          @default(-1)
  challan       Challan                      @relation(fields: [challanId], references: [id])
  competition   Competitions                 @relation(fields: [competitionId], references: [id])
  user          User                         @relation(fields: [userId], references: [id])
  members       Competitions_Teams_Members[]

}

model Competitions_Teams_Members {
  id                 Int                @id @default(autoincrement())
  competitionsTeamId Int
  userId             Int
  competition        Competitions_Teams @relation(fields: [competitionsTeamId], references: [id])
  user               User               @relation(fields: [userId], references: [id])

}

model FAQ {
  id       Int    @id @default(autoincrement())
  question String
  answer   String
  category String
}








enum ChallanStatus {
  pending
  verified
  rejected
}

enum SocialEnum {
  nosocials
  qawali
  concert
  all
}

enum StudentOf {
  nust
  uni
  college
  school
  other
}

enum UserStatus {
  pending
  rejected
  verified
  ban
}
